---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/completions
    body:
      encoding: UTF-8
      string: '{"prompt":["Given an input question, first create a syntactically correct
        SQLite3 query to run,\nthen look at the results of the query and return the
        answer. Unless the user specifies\nin his question a specific number of examples
        he wishes to obtain, always limit your query\nto at most 5 results using a
        LIMIT clause. You can order the results by a relevant column\nto return the
        most interesting examples in the database.\n\nNever query for all the columns
        from a specific table, only ask for a the few relevant columns given the question.\n\nPay
        attention to use only the column names that you can see in the schema description.
        Be careful to not query for columns that do not exist.\nAlso, pay attention
        to which column is in which table.\n\nUse the following format:\nQuestion:
        \"Question here\"\nSQLQuery: \"SQL Query to run\"\nSQLResult: \"Result of
        the SQLQuery\"\nAnswer: \"Final answer here\"\n\nOnly use the following tables:\nCREATE
        TABLE users (\n id INTEGER NOT NULL,\n name varchar NULL,\n created_at datetime(6)
        NOT NULL,\n updated_at datetime(6) NOT NULL\n);\nCREATE TABLE comments (\n
        id INTEGER NOT NULL,\n content TEXT NULL,\n user_id INTEGER NULL,\n ticket_id
        INTEGER NULL,\n created_at datetime(6) NOT NULL,\n updated_at datetime(6)
        NOT NULL\n);\nCREATE TABLE tickets (\n id INTEGER NOT NULL,\n title varchar
        NULL,\n user_id INTEGER NULL,\n status INTEGER NULL,\n body TEXT NULL,\n created_at
        datetime(6) NOT NULL,\n updated_at datetime(6) NOT NULL\n);\n\nQuestion: how
        many comments are there from John?\n"],"model":"text-davinci-003","temperature":0.7,"max_tokens":256,"stop":["Answer:"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 21 Feb 2023 20:08:25 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '425'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - text-davinci-003
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '2075'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Request-Id:
      - c4a5bccdd99cd5272d07298ecde56e54
    body:
      encoding: UTF-8
      string: '{"id":"cmpl-6mTDzAwUv8Dmp1PYc49qnJEYdl81e","object":"text_completion","created":1677010103,"model":"text-davinci-003","choices":[{"text":"SQLQuery:
        SELECT COUNT(*) AS total_comments FROM comments INNER JOIN users on users.id
        = comments.user_id WHERE users.name = ''John'';\nSQLResult: total_comments\n","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":395,"completion_tokens":45,"total_tokens":440}}

        '
  recorded_at: Tue, 21 Feb 2023 20:08:25 GMT
recorded_with: VCR 6.1.0
