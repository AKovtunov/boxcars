---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/completions
    body:
      encoding: UTF-8
      string: '{"prompt":["Answer the following questions as best you can. You have
        access to the following actions:\n\nSearch: useful for when you need to answer
        questions about current events.You should ask targeted questions\nCalculator:
        useful for when you need to answer questions about math\n\nUse the following
        format:\n\nQuestion: the input question you must answer\nThought: you should
        always think about what to do\nAction: the action to take, should be one of
        [Search, Calculator]\nAction Input: the input to the action\nObservation:
        the result of the action\n... (this Thought/Action/Action Input/Observation
        sequence can repeat N times)\nThought: I now know the final answer\nFinal
        Answer: the final answer to the original input question\n\n\nBegin!\n\nQuestion:
        What is pi times the square root of the average temperature in Austin TX in
        January?\nThought:\n"],"model":"text-davinci-003","temperature":0.7,"max_tokens":256,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Feb 2023 19:04:07 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '432'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - text-davinci-003
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '2641'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Request-Id:
      - 705fd2484c098abd3d314ecf54d6e27b
    body:
      encoding: UTF-8
      string: '{"id":"cmpl-6l0JZXiGKI3oek2s5zNP4BZ4KK1TW","object":"text_completion","created":1676660645,"model":"text-davinci-003","choices":[{"text":"I
        should do some calculations and look up the average temperature of Austin
        TX\nAction: Calculator\nAction Input: pi * sqrt(Average Temperature in Austin
        TX in January)","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":188,"completion_tokens":35,"total_tokens":223}}

        '
  recorded_at: Fri, 17 Feb 2023 19:04:07 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/completions
    body:
      encoding: UTF-8
      string: '{"prompt":["You are GPT-3, and you can''t do math.\nYou can do basic
        math, and your memorization abilities are impressive, but you can''t do any
        complex calculations that a human could not do in their head. You also have
        an annoying tendency to just make up highly specific, but wrong, answers.\nSo
        we hooked you up to a Ruby 3 kernel, and now you can execute ruby code. If
        anyone gives you a hard math problem, just use this format and weâ€™ll take
        care of the rest:\n\nQuestion: ${{Question with hard calculation.}}\n```ruby\n${{Code
        that prints what you need to know}}\n```\n```output\n${{Output of your code}}\n```\nAnswer:
        ${{Answer}}\n\nOtherwise, use this simpler format:\n\nQuestion: ${{Question
        without hard calculation}}\nAnswer: ${{Answer}}\n\nBegin.\n\nQuestion: What
        is 37593 * 67?\n```ruby\nputs(37593 * 67)\n```\n```output\n2518731\n```\nAnswer:
        2518731\n\nQuestion: what is 2518731 + 0?\nAnswer: 2518731\n\nQuestion: pi
        * sqrt(Average Temperature in Austin TX in January)\n"],"model":"text-davinci-003","temperature":0.7,"max_tokens":256,"stop":["```output"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Feb 2023 19:04:13 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '310'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - text-davinci-003
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1823'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Request-Id:
      - 4d0217ae8aca5dcfc356932e90707ba8
    body:
      encoding: UTF-8
      string: '{"id":"cmpl-6l0JflmTcycGSPA4zE9F4wNz8x3Do","object":"text_completion","created":1676660651,"model":"text-davinci-003","choices":[{"text":"```ruby\nputs(Math::PI
        * Math.sqrt(55))\n```\n","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":273,"completion_tokens":22,"total_tokens":295}}

        '
  recorded_at: Fri, 17 Feb 2023 19:04:13 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/completions
    body:
      encoding: UTF-8
      string: '{"prompt":["Answer the following questions as best you can. You have
        access to the following actions:\n\nSearch: useful for when you need to answer
        questions about current events.You should ask targeted questions\nCalculator:
        useful for when you need to answer questions about math\n\nUse the following
        format:\n\nQuestion: the input question you must answer\nThought: you should
        always think about what to do\nAction: the action to take, should be one of
        [Search, Calculator]\nAction Input: the input to the action\nObservation:
        the result of the action\n... (this Thought/Action/Action Input/Observation
        sequence can repeat N times)\nThought: I now know the final answer\nFinal
        Answer: the final answer to the original input question\n\n\nBegin!\n\nQuestion:
        What is pi times the square root of the average temperature in Austin TX in
        January?\nThought:I should do some calculations and look up the average temperature
        of Austin TX\nAction: Calculator\nAction Input: pi * sqrt(Average Temperature
        in Austin TX in January)\nObservation: 23.298674684623474\nThought:\n"],"model":"text-davinci-003","temperature":0.7,"max_tokens":256,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Feb 2023 19:04:16 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '381'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - text-davinci-003
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '2000'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Request-Id:
      - 32aebe643e3155df3aefc61883885e70
    body:
      encoding: UTF-8
      string: '{"id":"cmpl-6l0Jix2nAZI1PzA6xYpZAJMnfNBAD","object":"text_completion","created":1676660654,"model":"text-davinci-003","choices":[{"text":"I
        should check if this is the right answer\nAction: Search\nAction Input: Average
        temperature in Austin TX in January","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":239,"completion_tokens":24,"total_tokens":263}}

        '
  recorded_at: Fri, 17 Feb 2023 19:04:15 GMT
- request:
    method: get
    uri: https://serpapi.com/search?api_key=<SERPAPI_API_KEY>&engine=google&output=json&q=Average%20temperature%20in%20Austin%20TX%20in%20January&source=ruby
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Feb 2023 19:04:17 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 79b0c9adffdd27ec-SLC
      Cache-Control:
      - max-age=3600, public
      Etag:
      - W/"64be23d46950ef34ed7c18a2dd43aaa6"
      Vary:
      - Accept-Encoding
      Cf-Cache-Status:
      - MISS
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Serpapi-Search-Id:
      - 63efcfb0359e99eec4e0a911
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - c159e099-c0b5-4b14-ac71-0c2349957379
      X-Robots-Tag:
      - noindex, nofollow
      X-Runtime:
      - '1.115094'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - cloudflare
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 17 Feb 2023 19:04:17 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/completions
    body:
      encoding: UTF-8
      string: '{"prompt":["Answer the following questions as best you can. You have
        access to the following actions:\n\nSearch: useful for when you need to answer
        questions about current events.You should ask targeted questions\nCalculator:
        useful for when you need to answer questions about math\n\nUse the following
        format:\n\nQuestion: the input question you must answer\nThought: you should
        always think about what to do\nAction: the action to take, should be one of
        [Search, Calculator]\nAction Input: the input to the action\nObservation:
        the result of the action\n... (this Thought/Action/Action Input/Observation
        sequence can repeat N times)\nThought: I now know the final answer\nFinal
        Answer: the final answer to the original input question\n\n\nBegin!\n\nQuestion:
        What is pi times the square root of the average temperature in Austin TX in
        January?\nThought:I should do some calculations and look up the average temperature
        of Austin TX\nAction: Calculator\nAction Input: pi * sqrt(Average Temperature
        in Austin TX in January)\nObservation: 23.298674684623474\nThought:I should
        check if this is the right answer\nAction: Search\nAction Input: Average temperature
        in Austin TX in January\nObservation: increase from 62Â°F to 64Â°F\nThought:\n"],"model":"text-davinci-003","temperature":0.7,"max_tokens":256,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Feb 2023 19:04:20 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '415'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - text-davinci-003
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '2800'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Request-Id:
      - 31b1f1f196236f4ba5e29f5e79393f95
    body:
      encoding: UTF-8
      string: '{"id":"cmpl-6l0Jm2cNAhYTBPmmIcyX9JtUvqE4R","object":"text_completion","created":1676660658,"model":"text-davinci-003","choices":[{"text":"I
        should now calculate the pi times the square root of the average temperature
        in Austin TX in January\nAction: Calculator\nAction Input: pi * sqrt(64)","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":280,"completion_tokens":34,"total_tokens":314}}

        '
  recorded_at: Fri, 17 Feb 2023 19:04:20 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/completions
    body:
      encoding: UTF-8
      string: '{"prompt":["You are GPT-3, and you can''t do math.\nYou can do basic
        math, and your memorization abilities are impressive, but you can''t do any
        complex calculations that a human could not do in their head. You also have
        an annoying tendency to just make up highly specific, but wrong, answers.\nSo
        we hooked you up to a Ruby 3 kernel, and now you can execute ruby code. If
        anyone gives you a hard math problem, just use this format and weâ€™ll take
        care of the rest:\n\nQuestion: ${{Question with hard calculation.}}\n```ruby\n${{Code
        that prints what you need to know}}\n```\n```output\n${{Output of your code}}\n```\nAnswer:
        ${{Answer}}\n\nOtherwise, use this simpler format:\n\nQuestion: ${{Question
        without hard calculation}}\nAnswer: ${{Answer}}\n\nBegin.\n\nQuestion: What
        is 37593 * 67?\n```ruby\nputs(37593 * 67)\n```\n```output\n2518731\n```\nAnswer:
        2518731\n\nQuestion: what is 2518731 + 0?\nAnswer: 2518731\n\nQuestion: pi
        * sqrt(64)\n"],"model":"text-davinci-003","temperature":0.7,"max_tokens":256,"stop":["```output"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Feb 2023 19:04:24 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '310'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - text-davinci-003
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1623'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Request-Id:
      - 02623a88cf4e3fb7d63d876d4f40246a
    body:
      encoding: UTF-8
      string: '{"id":"cmpl-6l0JrlqjIVPM4Bj6Bdr1U86Dz3NfW","object":"text_completion","created":1676660663,"model":"text-davinci-003","choices":[{"text":"```ruby\nputs(Math::PI
        * Math.sqrt(64))\n```\n","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":267,"completion_tokens":22,"total_tokens":289}}

        '
  recorded_at: Fri, 17 Feb 2023 19:04:24 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/completions
    body:
      encoding: UTF-8
      string: '{"prompt":["Answer the following questions as best you can. You have
        access to the following actions:\n\nSearch: useful for when you need to answer
        questions about current events.You should ask targeted questions\nCalculator:
        useful for when you need to answer questions about math\n\nUse the following
        format:\n\nQuestion: the input question you must answer\nThought: you should
        always think about what to do\nAction: the action to take, should be one of
        [Search, Calculator]\nAction Input: the input to the action\nObservation:
        the result of the action\n... (this Thought/Action/Action Input/Observation
        sequence can repeat N times)\nThought: I now know the final answer\nFinal
        Answer: the final answer to the original input question\n\n\nBegin!\n\nQuestion:
        What is pi times the square root of the average temperature in Austin TX in
        January?\nThought:I should do some calculations and look up the average temperature
        of Austin TX\nAction: Calculator\nAction Input: pi * sqrt(Average Temperature
        in Austin TX in January)\nObservation: 23.298674684623474\nThought:I should
        check if this is the right answer\nAction: Search\nAction Input: Average temperature
        in Austin TX in January\nObservation: increase from 62Â°F to 64Â°F\nThought:I
        should now calculate the pi times the square root of the average temperature
        in Austin TX in January\nAction: Calculator\nAction Input: pi * sqrt(64)\nObservation:
        25.132741228718345\nThought:\n"],"model":"text-davinci-003","temperature":0.7,"max_tokens":256,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Feb 2023 19:04:27 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '325'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - text-davinci-003
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1554'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Request-Id:
      - 443bb6b7d4adafbd01b55572abf4b085
    body:
      encoding: UTF-8
      string: '{"id":"cmpl-6l0JtId3e17PMrPbK2YeHyWBaU56H","object":"text_completion","created":1676660665,"model":"text-davinci-003","choices":[{"text":"I
        now know the final answer\nFinal Answer: 25.132741228718345","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":330,"completion_tokens":18,"total_tokens":348}}

        '
  recorded_at: Fri, 17 Feb 2023 19:04:27 GMT
recorded_with: VCR 6.1.0
